Here’s a step-by-step guide (Steps A–E) to help you solve and complete the **“Advanced GitOps Techniques”** mini project using ArgoCD:
Thanks for sharing the review and feedback. Based on the evaluator's comments, we need to build a **complete, end-to-end solution** that covers:

---

### ✅ **Corrected & Complete Advanced GitOps Project Implementation**

---

## **Step A: Multi-Cluster Kubernetes Setup**

1. **Provision Two EKS Clusters**

   * Name them `eks-dev` and `eks-prod`
   * Use Terraform or eksctl (AWS CLI)
   * Ensure both clusters are added to `~/.kube/config`

2. **Verify Access**

   ```bash
   kubectl config get-contexts
   kubectl config use-context eks-dev
   kubectl get nodes
   kubectl config use-context eks-prod
   kubectl get nodes
   ```

---

## **Step B: Register Clusters with ArgoCD**

1. **Install ArgoCD in Dev Cluster**

   ```bash
   kubectl create namespace argocd
   kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml
   ```

2. **Login to ArgoCD CLI**

   ```bash
   kubectl port-forward svc/argocd-server -n argocd 8080:443
   argocd login localhost:8080
   ```

3. **Add Clusters to ArgoCD**

   ```bash
   argocd cluster add eks-dev
   argocd cluster add eks-prod
   ```

---

## **Step C: Git Repository Structure for Microservices**

```
gitops-repo/
│
├── microservice-1/
│   ├── base/
│   │   ├── deployment.yaml
│   │   └── service.yaml
│   └── overlays/
│       ├── dev/
│       └── prod/
│
├── microservice-2/
│   ├── base/
│   └── overlays/
│       ├── dev/
│       └── prod/
```

Use **Kustomize** for managing overlays (dev, prod).

---

## **Step D: ArgoCD Application Definitions**

1. **App for Dev Cluster**

```yaml
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: microservice-1-dev
  namespace: argocd
spec:
  project: default
  source:
    repoURL: https://github.com/yourusername/gitops-repo.git
    targetRevision: HEAD
    path: microservice-1/overlays/dev
  destination:
    server: https://<dev-cluster-endpoint>
    namespace: microservice-1-dev
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
```

2. **App for Prod Cluster**

> Same as above, just change path to `overlays/prod` and destination server to prod cluster.

---

## **Step E: CI/CD Pipeline Integration (GitHub Actions)**

### `.github/workflows/build-and-deploy.yml`

```yaml
name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Build Docker Image
        run: docker build -t my-app:${{ github.sha }} .

      - name: Push to ECR
        run: |
          aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin <aws_account>.dkr.ecr.us-east-1.amazonaws.com
          docker tag my-app:${{ github.sha }} <aws_account>.dkr.ecr.us-east-1.amazonaws.com/my-app:${{ github.sha }}
          docker push <aws_account>.dkr.ecr.us-east-1.amazonaws.com/my-app:${{ github.sha }}

      - name: Update Manifest
        run: |
          sed -i "s|image: .*|image: <aws_account>.dkr.ecr.us-east-1.amazonaws.com/my-app:${{ github.sha }}|g" k8s/deployment.yaml
          git config user.name "CI Bot"
          git config user.email "ci@example.com"
          git add k8s/deployment.yaml
          git commit -m "Update image to ${{ github.sha }}"
          git push
```

---

## **Step F: Automation and Webhooks**

1. **Auto-Sync in ArgoCD**

   * Enable Auto-Sync in the UI or use:

     ```yaml
     syncPolicy:
       automated:
         prune: true
         selfHeal: true
     ```

2. **Set Webhook from GitHub to ArgoCD**

   * Webhook URL: `http://argocd-server.argo-cd.svc.cluster.local/api/webhook`
   * Content type: `application/json`

---

## **Step G: Best Practices Applied**

* **Repo Layout**:

  * Organized by services and environments
* **Secrets Management**:

  * Use [Sealed Secrets](https://github.com/bitnami-labs/sealed-secrets) or [SOPS](https://github.com/mozilla/sops)
* **Rollback**:

  * Enable ArgoCD history and rollback features
* **Multi-Environment Strategy**:

  * Kustomize overlays for `dev`, `staging`, `prod`

---

## **Step H: Case Study Example**

### Reference:

* [Intuit ArgoCD at Scale](https://argo-cd.readthedocs.io/en/stable/operator-manual/argocd-at-intuit/)
* Key takeaways:

  * Over 1500 services deployed via ArgoCD
  * Multi-team ownership with GitOps control
  * Automated promotion from staging to production via PRs

---

Would you like this complete implementation structured into a downloadable Markdown or PDF file as well? I can also help you document the **observations, challenges**, and **screenshots** required for submission.


